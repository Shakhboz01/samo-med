c
buyer.sales.last.created_at
c
end_time.nil?
buyer.sales.pluck(:created_at)
c
buyer.sales.pluck(:created_at)
created_at
buyer.sales.pluck(:created_at)
buyer.name
buyer.sales.where('created_at >= ?', created_at)
c
sales.sum(:total_price)
c
sales.sum(:total_price)
c
last_treatment.created_at >= DateTime.current.beginning_of_day
last_treatment = treatments.order(created_at: :asc).last
c
last_treatment.created_at >= DateTime.current.beginning_of_day
last_treatment.created_at
DateTime.current.beginning_of_day
last_treatment.nil?
last_treatment = treatments.order(created_at: :asc).last
treatments.order(created_at: :asc).last
c
self.danger_zone = true
c
danger_zone
self.danger_zone = true
danger_zone
pack.sell_price == sell_price
c
pack.sell_price == sell_price
c
pack.sell_price == sell_price
sell_price
pack.sell_price
c
entry.update(amount_sold: entry.amount_sold - amount_to_revert)
entry
amount_to_revert
entry.amount_sold
entry.update!(amount_sold: entry.amount_sold - amount_to_revert).errors.messages.values
amount_to_revert = [entry.amount_sold, remaining_amount].min
entry
c
@salary.errors.messages
\
c
price_in_usd_changed?
c
ProductSell.find(8)
id
c
action.to_sym
c
price_in_usd_changed?
c
price_info.sum
c
price_info
price_info.sum
c
update_buy_price
(pack_usage_total_price / rate).to_f
pack_usage_total_price.to_i
c
pack_usage_total_price.to_i
rate
(pack_usage_total_price.to_i / rate.to_i)
pack_usage_total_price
pack_usage_in_usd = pack_usage.list_of_pack.price_in_usd
pack_usage.list_of_pack.price_in_usd == pack_price_in_usd
pack_usage_total_price.to_i
      return pack_usage_total_price if pack_usage.list_of_pack.price_in_usd == pack_price_in_usd
pack_usage_total_price = pack_usage.amount * pack_usage.list_of_pack.buy_price
c
pack_usages.pack
c
pack_usage.pack.buy_price.to_i
pack_usage_total_price.to_i
pack_usage.pack.price_in_usd == pack_price_in_usd
pack_usage.pack.price_in_usd
c
price_in_usd
c
pack_usages.last.pack.buy_price * 11
price_info.sum
c
pack_usages
c
product_sell_params[:amount]
product_sell_params[:pack_id].empty?
c
@sales
c
@sales.count
c
params[:sales_data][:sale_ids].split(',')
c
ProductCategory.last.id
pack
pack.errors.messages
c
pack.errors.messages
sell_price_in_usd
c
@product_sell.errors.messages
        byebug
c
@sales.last
c
@sale.id
@sales.count
@sale.buyer.sales.pluck(:id)
c
@sale.buyer.sales.pluck(:id)
c
ProductSelc
self
(sell_price * amount).to_f
amount.to_f
c
pack.errors.messages
@product_sell.pack_id
c
product_sell_params['product_sell']
c
sell_price_in_uzs.to_f
c
sell_price_in_uzs.to_f
c
sell_price
c
sell_price
c
product_sells.last.sell_price.to_i
c
ProductSell.last.id
self.sell_price
ProductSell.last.sell_price.to_i
sell_price
average_prices
c
average_prices["average_buy_price_in_uzs"]
average_prices
price_in_usd
average_prices["average_buy_price_in_usd"]
c
ProductSell::RoundPrice.run(number: sell_price_in_uzs).resultc
c
remaining_amount.positive?
c
average_sell_price
price_in_usd
price_data
c
price_in_usd
price_data
c
price_data
remaining_amount.positive?
c
product_entry.amount - product_entry.amount_sold
product_entry.buy_price
product_entry.sell_price
c
set_prices_in_usd
c
amount
product_entry_ids
c
price_in_usd
c
price_data
c
sell_price.to_i
sell_price = price_in_usd ? pack.sell_price : pack.sell_price / CurrencyRate.last.rate
sell_price.to_i
price_in_usd
price_data
c
price_data
c
price_data
sell_price
c
price_data
c
sell_price.to_f
c
price_in_usd
pack.price_in_usd
c
price_datac
rate
price_in_usd
c
file_path
c
sfs.errors.messages
c
@delivery_from_counterparties_in_usd
@expenditures_in_usd
@sales_in_usd
@overall_income_in_usd
c
sales.where('sales.price_in_usd = ?', true).sum(:total_paid) *100
sales.where('sales.price_in_usd = ?', true)
unpaid_difference_in_percent_in_usd
c
unpaid_difference_in_percent_in_uzs
unpaid_difference_in_percent_in_usd
c
sales.where('sales.price_in_usd = ?', true).sum(:total_price)
sales.where('sales.price_in_usd = ?', true).sum(:total_paid) * 100
sales.where('sales.price_in_usd = ?', true).sum(:total_paid) * 100 / sales.where('sales.price_in_usd = ?', true).sum(:total_price)
unpaid_difference_in_percent_in_usd
product_sells.price_in_usd.sum(:total_profit)
unpaid_difference_in_percent_in_usd >= 100
unpaid_difference_in_percent_in_uzs >= 100
@profit_from_sale_in_usd
c
difference.positive?
difference
c
initial_remaining
self.decrement!(:initial_remaining, difference.abs)
difference.abs
initial_remaining
c
Pack.last.initial_remaining
self.increment!(:initial_remaining, difference.abs)
difference.abs
difference.to_i
c
initial_remaining_was
initial_remaining
self.calculate_product_remaining
c
can_restore.valid?
c
can_restore.valid?
c
can_restore.valid?
c
can_restore
can_restore.valid?
packs_number_to_restore
c
packs_number_to_restore
c
can_restore.valid?
c
          psc = pack.product_size_colors.find_by_size_id(product.size_id)
